using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace marvin2.Models
{
    /// <summary>
    /// Base class representing the association between a <see cref="Person"/> and a <see cref="Chore"/>.
    /// This abstract type is not mapped directly to the database (<see cref="NotMappedAttribute"/>)
    /// and provides common properties and lifecycle helpers for concrete chore assignment types.
    /// </summary>
    [NotMapped]
    public abstract class PersonChore
    {
        /// <summary>
        /// Primary key for the person-chore association. Generated by the database.
        /// </summary>
        [Key, DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        /// <summary>
        /// Indicates whether this chore assignment is currently active.
        /// </summary>
        public bool IsActive { get; set; }

        /// <summary>
        /// Backing field for the <see cref="Person"/> navigation property.
        /// </summary>
        [ForeignKey("PersonId")]        
        private Person? _person;

        /// <summary>
        /// Navigation property referencing the <see cref="Person"/> who is assigned the chore.
        /// Setting this property triggers <see cref="OnSetPerson(Person)"/> when a non-null value is provided.
        /// </summary>
        public virtual Person? Person
        {
            get
            {
                return _person;
            }
            set
            {
                if(value != null)
                {
                    this._person = value;
                    OnSetPerson(value);
                }
            }
        }

        /// <summary>
        /// Backing field for the <see cref="Chore"/> navigation property.
        /// </summary>
        [ForeignKey("ChoreId")]
        private Chore? _chore;

        /// <summary>
        /// Navigation property referencing the <see cref="Chore"/> that is assigned.
        /// Setting this property triggers <see cref="OnSetChore(Chore)"/> when a non-null value is provided.
        /// </summary>
        public virtual Chore? Chore
        {
            get
            {
                return _chore;
            }
            set
            {
                if(value != null)
                {
                    this._chore = value;
                    OnSetChore(value);
                }
            }
        }

        /// <summary>
        /// Hook invoked when the <see cref="Person"/> property is set to a non-null value.
        /// Implementations may perform additional initialization. This method is private and
        /// is called from the <see cref="Person"/> setter.
        /// </summary>
        /// <param name="person">The person that was set.</param>
        private void OnSetPerson(Person person) 
        {
            Person = person;
        }
        
        /// <summary>
        /// Hook invoked when the <see cref="Chore"/> property is set to a non-null value.
        /// Implementations may perform additional initialization. This method is private and
        /// is called from the <see cref="Chore"/> setter.
        /// </summary>
        /// <param name="chore">The chore that was set.</param>
        private void OnSetChore(Chore chore)
        {
            Chore = chore;
        }
        
        /// <summary>
        /// Marks this person-chore association as active.
        /// </summary>
        public void Activate()
        {
            IsActive = true;
        }
        
        /// <summary>
        /// Marks this person-chore association as inactive.
        /// </summary>
        public void Deactivate()
        {
            IsActive = false;
        }
    }
}