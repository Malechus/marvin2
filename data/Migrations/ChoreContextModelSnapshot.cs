// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using marvin2.Models;

#nullable disable

namespace data.Migrations
{
    [DbContext(typeof(ChoreContext))]
    partial class ChoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("marvin2.Models.Chore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Chore");

                    b.HasDiscriminator().HasValue("Chore");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("marvin2.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("marvin2.Models.DailyChore", b =>
                {
                    b.HasBaseType("marvin2.Models.Chore");

                    b.Property<int>("priority")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("DailyChore");
                });

            modelBuilder.Entity("marvin2.Models.MonthlyChore", b =>
                {
                    b.HasBaseType("marvin2.Models.Chore");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("int");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MonthlyChore");
                });

            modelBuilder.Entity("marvin2.Models.WeeklyChore", b =>
                {
                    b.HasBaseType("marvin2.Models.Chore");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.ToTable("Chore", t =>
                        {
                            t.Property("Day")
                                .HasColumnName("WeeklyChore_Day");
                        });

                    b.HasDiscriminator().HasValue("WeeklyChore");
                });

            modelBuilder.Entity("marvin2.Models.Chore", b =>
                {
                    b.HasOne("marvin2.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Person");
                });
#pragma warning restore 612, 618
        }
    }
}
